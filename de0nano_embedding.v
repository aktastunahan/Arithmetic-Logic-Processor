
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module de0nano_embedding(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;


//=======================================================
//  REG/WIRE declarations
//=======================================================


parameter N = 4;

wire [3:0] p_in;

assign p_in = 4'b0101;

//=======================================================
//  Structural coding
//=======================================================
			
ALP ALP_inst
(
	.clk(~KEY[0]) ,	// input  clk_sig
	.i_OP(SW[2:0]) ,	// input [2:0] i_OP_sig
	.i_DATA_IN(GPIO_0[3:0]) ,	// input [3:0] i_DATA_IN_sig
	.i_COMP(GPIO_0[5]) ,	// input  i_COMP_sig
	.i_LOAD(GPIO_0[4]) ,	// input  i_LOAD_sig
	.i_CLR(~KEY[1]) ,	// input  i_CLR_sig
	.ERR(GPIO_0[6]) ,	// output  ERR_sig
	.o_R0(LED[3:0]) ,	// output [3:0] o_R0_sig
	.o_R1(LED[7:4]) 	// output [3:0] o_R1_sig
);
endmodule
